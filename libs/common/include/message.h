#ifndef __MESSAGE_H__
#define __MESSAGE_H__

#include <idl.h> /* generated by genidl.py */
#include <types.h>

#ifdef __LP64__
#    define MESSAGE_SIZE 256
#else
#    define MESSAGE_SIZE 32
#endif

/// Message.
struct message {
    /// The type of message. If it's negative, this field represents an error
    /// (error_t).
    int type;
    /// The sender task of this message.
    task_t src;
    /// The message contents. Note that it's a union, not struct!
    union {
        // The message contents as raw bytes.
        uint8_t raw[MESSAGE_SIZE - sizeof(int) - sizeof(task_t)];

        // The common header of message fields.
        struct {
            /// The ool pointer to be sent. Used if MSG_OOL is set.
            void *ool_ptr;
            /// The size of ool payload in bytes.
            size_t ool_len;
        };

        // Auto-generated message fields:
        //
        //     struct { notifcations_t data; } notifcations;
        //     struct { task_t task; ... } page_fault;
        //     struct { paddr_t paddr; } page_reply_fault;
        //     ...
        //
        IDL_MESSAGE_FIELDS
    };
};

STATIC_ASSERT(sizeof(struct message) == MESSAGE_SIZE);
IDL_STATIC_ASSERTS /* some assertions defined in idl.h */

#endif
