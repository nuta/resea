oneway notifications(data: notifications);
oneway async();
oneway invalid();

enum abi_hook_type {
    INITIAL = 1,
    SYSCALL = 2,
};
oneway exception(task: task, exception: exception_type);
rpc page_fault(task: task, vaddr: vaddr, ip: vaddr, fault: uint) -> ();
rpc abi_hook(task: task, type: int, frame: trap_frame) -> (frame: trap_frame);

namespace benchmark {
    rpc nop(value: int) -> (value: int);
    rpc nop_with_ool(data: bytes) -> (data: bytes);
}

namespace vm {
    rpc alloc_pages(num_pages: size, paddr: paddr) -> (vaddr: vaddr, paddr: paddr);
}

namespace discovery {
    rpc serve(name: str) -> ();
    rpc lookup(name: str) -> (task: task);
}

namespace task {
    rpc launch(name_and_cmdline: str) -> (task: task);
    rpc watch(task: task) -> ();
    rpc unwatch(task: task) -> ();
    async oneway exited(task: task);
}

namespace ool {
    rpc recv(addr: vaddr, len: size)-> ();
    rpc send(dst: task, addr: vaddr, len: size)-> (id: vaddr);
    rpc verify(src: task, id: vaddr, len: size)-> (received_at: vaddr);
}

namespace fs {
    rpc open(path: str) -> (handle: handle);
    rpc create(path: str, exist_ok: bool) -> (handle: handle);
    rpc close(handle: handle) -> ();
    rpc read(handle: handle, offset: offset, len: size) -> (data: bytes);
    rpc write(handle: handle, offset: offset, data: bytes) -> ();
    rpc stat(path: str) -> (size: size);
}

namespace blk {
    rpc read(sector: offset, num_sectors: size) -> (data: bytes);
    rpc write(sector: offset, data: bytes) -> ();
}

namespace net {
    oneway rx(payload: bytes);
    oneway tx(payload: bytes);
}

namespace time {
    rpc readrtc(format: str) -> (currenttime: str);
}

include "servers/*/interface.idl";
